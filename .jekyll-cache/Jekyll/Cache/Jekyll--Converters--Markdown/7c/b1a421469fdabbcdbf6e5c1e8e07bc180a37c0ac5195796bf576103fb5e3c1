I"GN<p>The response from the intent can hold additional meta data such as action buttons, images and field data making messages more interactive.</p>

<p>An intent can return two action attachments “Yes” and “No” which could be passed to Facebook to show two buttons with the message.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">request</span><span class="p">.</span><span class="nx">attachment</span><span class="p">(</span><span class="dl">'</span><span class="s1">action</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Yes</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">request</span><span class="p">.</span><span class="nx">attachment</span><span class="p">(</span><span class="dl">'</span><span class="s1">action</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">No</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<div class="chat">
  <div class="user"><span>Cheese</span></div>
  <div class="bot"><span>Do you like cheese?</span></div>
  <div class="attachment attachment-buttons">
    <span>Yes</span>
    <span>No</span>
  </div>
</div>

<p>Supported attachment types are currently:</p>

<ul>
  <li><code class="highlighter-rouge">action</code> - Button options to show the user</li>
  <li><code class="highlighter-rouge">image</code> - Send image URL’s to be displayed</li>
  <li><code class="highlighter-rouge">field</code> - Additional small information, e.g. citation</li>
  <li><code class="highlighter-rouge">reply</code> - Expecting a reply</li>
  <li><code class="highlighter-rouge">voice</code> - Alternative for voice instead of using standard message text</li>
</ul>

<h2 id="enabling-attachments">Enabling attachments</h2>

<p>Attachments are found in <code class="highlighter-rouge">/src/Attachment/</code></p>

<p>For an attachment to work they must be enabled in your <code class="highlighter-rouge">config.js</code> file and the server must be restarted.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">config</span><span class="p">.</span><span class="nx">attachments</span> <span class="o">=</span> <span class="p">[</span>
  <span class="dl">'</span><span class="s1">Sys.Attachment.Image</span><span class="dl">'</span><span class="p">,</span>
  <span class="dl">'</span><span class="s1">Sys.Attachment.Action</span><span class="dl">'</span><span class="p">,</span>
  <span class="dl">'</span><span class="s1">Sys.Attachment.Field</span><span class="dl">'</span>
<span class="p">];</span>
</code></pre></div></div>

<h2 id="client-support">Client support</h2>

<p>The clients must support these attachment types to send to the end platform. Each platform handle these attachments differently and can have restrictions. For example Facebook support actions and buttons but have a limit of three buttons in total.</p>

<p>GI’s attachments were loosely based on the <a href="https://api.slack.com/docs/message-attachments">Slack API</a>.</p>

<h2 id="action-buttons">Action buttons</h2>

<p>Show option buttons to the user.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">request</span><span class="p">.</span><span class="nx">attachment</span><span class="p">(</span><span class="dl">'</span><span class="s1">action</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Rock</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">request</span><span class="p">.</span><span class="nx">attachment</span><span class="p">(</span><span class="dl">'</span><span class="s1">action</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Paper</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">request</span><span class="p">.</span><span class="nx">attachment</span><span class="p">(</span><span class="dl">'</span><span class="s1">action</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Scissors</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<div class="chat">
  <div class="user"><span>Play rock paper scissors</span></div>
  <div class="bot"><span>Rock, paper or scissors?</span></div>
  <div class="attachment attachment-buttons">
    <span>Rock</span>
    <span>Paper</span>
    <span>Scissors</span>
  </div>
</div>

<p>After one of these buttons is pressed it will send the text back to the GI client, for example “yes”.</p>

<p>But without using <code class="highlighter-rouge">expect</code> and a <code class="highlighter-rouge">parameter</code> the next input of “yes” or “no” won’t be recognised.</p>

<h2 id="images">Images</h2>

<p>Used for showing buttons to a user.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">request</span><span class="p">.</span><span class="nx">attachment</span><span class="p">(</span><span class="dl">'</span><span class="s1">image</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">https://picsum.photos/300/300/?random</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<div class="chat">
  <div class="user"><span>Random picture</span></div>
  <div class="bot"><span><img src="https://picsum.photos/300/300/?random" /></span></div>
</div>

<h2 id="voice">Voice</h2>

<p>If you want the client to handle a voice message differently you can use the voice attachment.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">class</span> <span class="nx">RandomPictureIntent</span> <span class="kd">extends</span> <span class="nx">Intent</span> <span class="p">{</span>

  <span class="nx">setup</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">train</span><span class="p">([</span>
      <span class="dl">'</span><span class="s1">random picture</span><span class="dl">'</span>
    <span class="p">]);</span>
  <span class="p">}</span>

  <span class="nx">response</span><span class="p">(</span><span class="nx">request</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">request</span><span class="p">.</span><span class="nx">attachment</span><span class="p">(</span><span class="dl">'</span><span class="s1">image</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">https://picsum.photos/300/300/?random</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">request</span><span class="p">.</span><span class="nx">attachment</span><span class="p">(</span><span class="dl">'</span><span class="s1">voice</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">I can</span><span class="se">\'</span><span class="s1">t show you a picture</span><span class="dl">'</span><span class="p">);</span>
    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
  <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<h2 id="trapping-example">Trapping example</h2>

<p>This example uses attachment of buttons, parameters to fetch the confirmation and expecting to wait for the reply.</p>

<p>The Apptem Confirm entity has a small dictionary of common confirmations for yes and no.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">class</span> <span class="nx">AskMeAgainIntent</span> <span class="kd">extends</span> <span class="nx">Intent</span> <span class="p">{</span>

  <span class="nx">setup</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">train</span><span class="p">([</span><span class="dl">'</span><span class="s1">ask me again</span><span class="dl">'</span><span class="p">],</span> <span class="p">{</span> <span class="na">classifier</span><span class="p">:</span><span class="dl">'</span><span class="s1">strict</span><span class="dl">'</span> <span class="p">});</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">parameter</span><span class="p">(</span><span class="dl">'</span><span class="s1">ask_again</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Ask again</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">entity</span><span class="p">:</span> <span class="dl">'</span><span class="s1">App.Common.Entity.Confirm</span><span class="dl">'</span>
    <span class="p">});</span>
  <span class="p">}</span>

  <span class="nx">response</span><span class="p">(</span><span class="nx">request</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">request</span><span class="p">.</span><span class="nx">attachment</span><span class="p">(</span><span class="dl">'</span><span class="s1">action</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">Yes</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">request</span><span class="p">.</span><span class="nx">attachment</span><span class="p">(</span><span class="dl">'</span><span class="s1">action</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">No</span><span class="dl">'</span><span class="p">);</span>

    <span class="nx">request</span><span class="p">.</span><span class="nx">expect</span><span class="p">({</span>
      <span class="na">action</span><span class="p">:</span> <span class="dl">'</span><span class="s1">chosen</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">force</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">});</span>

    <span class="k">return</span> <span class="dl">'</span><span class="s1">Ask me again?</span><span class="dl">'</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">chosen</span><span class="p">(</span><span class="nx">request</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">choice</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">value</span><span class="p">(</span><span class="dl">'</span><span class="s1">ask_again</span><span class="dl">'</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">choice</span> <span class="o">==</span> <span class="dl">'</span><span class="s1">yes</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">request</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="dl">'</span><span class="s1">App.Example.Intent.AskMeAgain</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="dl">'</span><span class="s1">OK that is enough</span><span class="dl">'</span><span class="p">;</span>
  <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<div class="chat">
  <div class="user"><span>Ask me again</span></div>
  <div class="attachment attachment-buttons">
    <span>Yes</span>
    <span>No</span>
  </div>
  <div class="user"><span>Yes</span></div>
  <div class="attachment attachment-buttons">
    <span>Yes</span>
    <span>No</span>
  </div>
  <div class="user"><span>Yup!</span></div>
  <div class="attachment attachment-buttons">
    <span>Yes</span>
    <span>No</span>
  </div>
  <div class="user"><span>No</span></div>
  <div class="bot"><span>OK that is enough</span></div>
</div>

<h2 id="creating-an-attachment">Creating an attachment</h2>

<p>Within your skill directory create a new directory called <code class="highlighter-rouge">Attachment</code> and create a file prepending the name of the attachment.</p>

<p>This following example is stored in <code class="highlighter-rouge">app/Skill/Example/Attachment/navigation.js</code>.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">class</span> <span class="nx">NavigationAttachment</span> <span class="kd">extends</span> <span class="nx">Attachment</span> <span class="p">{</span>

  <span class="kd">constructor</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>

    <span class="c1">//Can't have more than one of these attachments</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">multiple</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">build</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="na">name</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
      <span class="na">url</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">url</span>
    <span class="p">};</span>
  <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p>Enable the new attachment in your app config using the identifier name.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">config</span><span class="p">.</span><span class="nx">attachments</span> <span class="o">=</span> <span class="p">[</span>
  <span class="dl">'</span><span class="s1">App.Example.Attachment.Navigation</span><span class="dl">'</span>
<span class="p">];</span>
</code></pre></div></div>

<p>Then your intents from any skill can use this attachment.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">class</span> <span class="nx">DocumentationIntent</span> <span class="kd">extends</span> <span class="nx">Intent</span> <span class="p">{</span>

  <span class="nx">setup</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">train</span><span class="p">([</span>
      <span class="dl">'</span><span class="s1">@App.Example.Entity.Documentation</span><span class="dl">'</span><span class="p">,</span>
      <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="sr">/^go to/</span><span class="p">,</span><span class="dl">'</span><span class="s1">g</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">]);</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">parameter</span><span class="p">(</span><span class="dl">'</span><span class="s1">page</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Page</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">entity</span><span class="p">:</span> <span class="dl">"</span><span class="s2">App.Example.Entity.Documentation</span><span class="dl">"</span>
    <span class="p">});</span>
  <span class="p">}</span>

  <span class="nx">response</span><span class="p">(</span><span class="nx">request</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">request</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="dl">'</span><span class="s1">page</span><span class="dl">'</span><span class="p">))</span> <span class="p">{</span>
      <span class="k">return</span> <span class="dl">'</span><span class="s1">I</span><span class="se">\'</span><span class="s1">m not sure of that page in the documentation</span><span class="dl">'</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kd">let</span> <span class="nx">label</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">page.data.label</span><span class="dl">'</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">page.data.url</span><span class="dl">'</span><span class="p">);</span>

    <span class="nx">request</span><span class="p">.</span><span class="nx">attachment</span><span class="p">(</span><span class="dl">'</span><span class="s1">navigation</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">name</span><span class="p">:</span> <span class="nx">label</span><span class="p">,</span>
      <span class="na">url</span><span class="p">:</span> <span class="nx">url</span>
    <span class="p">});</span>

    <span class="k">return</span> <span class="dl">'</span><span class="s1">Taking you to </span><span class="dl">'</span><span class="o">+</span><span class="nx">label</span><span class="p">;</span>
  <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p>This attachment will then be included in the response that your client can handle.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="dl">"</span><span class="s2">attachments</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">navigation</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
      <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Intent attachments</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">url</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/docs/intents/attachments</span><span class="dl">"</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="chat">
  <div class="user"><span>go to attachments</span></div>
  <div class="bot"><span>Taking you to Intent attachments</span></div>
</div>
:ET