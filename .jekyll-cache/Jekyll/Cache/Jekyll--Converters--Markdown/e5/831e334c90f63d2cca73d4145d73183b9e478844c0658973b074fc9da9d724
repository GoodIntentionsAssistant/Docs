I"ª<p>The response from the app will return JSON formatted data. A response will come in multiple parts and have the same ident and an increasing sequence number.</p>

<p>Multipart sending can be useful when the result could be delayed by latency when calling a remote API, such as flight searches. It‚Äôs possible to send the first message telling the user to wait a moment.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"message"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"messages"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">"Hi! I'm the Good Intentions bot!"</span><span class="w"> </span><span class="p">],</span><span class="w">
  </span><span class="nl">"attachments"</span><span class="p">:</span><span class="w"> </span><span class="p">{},</span><span class="w">
  </span><span class="nl">"intent"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Fun/Greeting"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"response"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"namespace"</span><span class="p">:</span><span class="w"> </span><span class="s2">"response"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"confidence"</span><span class="p">:</span><span class="w"> </span><span class="mf">22.5646096341948</span><span class="p">,</span><span class="w">
  </span><span class="nl">"sequence"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
  </span><span class="nl">"microtime"</span><span class="p">:</span><span class="w"> </span><span class="mi">1503840844828</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<table>
  <thead>
    <tr>
      <th>Key</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>type</td>
      <td>Currently supported types are ‚Äústart‚Äù, ‚Äúend‚Äù and ‚Äúmessage‚Äù.</td>
    </tr>
    <tr>
      <td>messages</td>
      <td>If the <code class="highlighter-rouge">type</code> is message an array of messages will be returned.</td>
    </tr>
    <tr>
      <td>attachments</td>
      <td>Rich meta data including payload data for images, links, action buttons for the clients.</td>
    </tr>
    <tr>
      <td>intent</td>
      <td>The intent which was called.</td>
    </tr>
    <tr>
      <td>action</td>
      <td>The indents action which was called.</td>
    </tr>
    <tr>
      <td>namespace</td>
      <td>Return socket.io name space</td>
    </tr>
    <tr>
      <td>confidence</td>
      <td>Intent classifiers confidence</td>
    </tr>
    <tr>
      <td>sequence</td>
      <td>Incrementing number since the server was started</td>
    </tr>
    <tr>
      <td>microtime</td>
      <td>Server microtime when the data was sent</td>
    </tr>
  </tbody>
</table>

<h2 id="example-of-catching-response">Example of catching response</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">response</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">type</span> <span class="o">==</span> <span class="dl">'</span><span class="s1">message</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">ii</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">ii</span><span class="o">&lt;</span><span class="nx">data</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">ii</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Message:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">data</span><span class="p">.</span><span class="nx">messages</span><span class="p">[</span><span class="nx">ii</span><span class="p">]);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>
:ET